#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# scripts/install_mcp_gateway.sh
#
# One-shot installer & launcher for MCP-Gateway (Python mode, not Docker).
# - Installs OS and Python deps (Ubuntu/Debian or RHEL/Fedora families)
# - Clones/updates IBM/mcp-context-forge (mcpgateway package)
# - Creates/updates a virtualenv
# - Writes a .env if missing (with secure defaults)
# - Initializes the DB
# - Starts the gateway and waits for /health
#
# Usage:
#   bash scripts/install_mcp_gateway.sh [--project-dir ./mcpgateway] [--branch main]
#                                       [--host 0.0.0.0] [--port 4444]
#                                       [--force] [--non-interactive]
#
# After success:
#   - Gateway runs on http://<host>:<port>
#   - Use scripts/4-verify_servers.sh to verify
#   - Start Matrix Hub via `make dev` (port 7300 by default)
# ------------------------------------------------------------------------------

set -Eeuo pipefail

# ----------------------------- Defaults & Flags -------------------------------
PROJECT_DIR="${PROJECT_DIR:-./mcpgateway}"
BRANCH="${BRANCH:-main}"
HOST="${HOST:-0.0.0.0}"
PORT="${PORT:-4444}"
NON_INTERACTIVE="false"
FORCE="false"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --project-dir) PROJECT_DIR="$2"; shift 2 ;;
    --branch)      BRANCH="$2"; shift 2 ;;
    --host)        HOST="$2"; shift 2 ;;
    --port)        PORT="$2"; shift 2 ;;
    --force)       FORCE="true"; shift 1 ;;
    --non-interactive) NON_INTERACTIVE="true"; shift 1 ;;
    *) echo "Unknown arg: $1" >&2; exit 2 ;;
  esac
done

VENV_DIR="${PROJECT_DIR}/.venv"
ENV_FILE="${PROJECT_DIR}/.env"
LOG_DIR="${PROJECT_DIR}/logs"
LOG_FILE="${LOG_DIR}/mcpgateway.log"

# ------------------------------- Helpers -------------------------------------
log() { printf "%b\n" "[$(date +'%F %T')] $*"; }
die() { printf "%b\n" "ERROR: $*" >&2; exit 1; }

have_cmd() { command -v "$1" >/dev/null 2>&1; }

# --------------------- OS Packages (Ubuntu/Debian/RHEL) ----------------------
install_os_deps() {
  if have_cmd apt-get; then
    log "‚è≥ Updating apt and installing system packages‚Ä¶"
    sudo apt-get update -y
    sudo apt-get install -y \
      git curl jq unzip \
      python3 python3-venv python3-dev build-essential \
      libffi-dev libssl-dev \
      iproute2
  elif have_cmd dnf; then
    log "‚è≥ Installing system packages via dnf‚Ä¶"
    sudo dnf install -y \
      git curl jq unzip \
      python3 python3-venv python3-devel @development-tools \
      libffi-devel openssl-devel \
      iproute
  else
    log "‚ö†Ô∏è  Unknown package manager. Install manually:\n  git curl jq unzip python3 python3-venv python3-dev build-essential libffi-dev libssl-dev iproute2"
  fi
}

# --------------------------- Clone / Update Repo -----------------------------
fetch_repo() {
  if [[ ! -d "${PROJECT_DIR}/.git" ]]; then
    log "‚è≥ Cloning IBM/mcp-context-forge -> ${PROJECT_DIR} (branch: ${BRANCH})‚Ä¶"
    git clone --branch "${BRANCH}" --depth 1 https://github.com/IBM/mcp-context-forge.git "${PROJECT_DIR}"
  else
    log "üîÑ Repo exists; fetching latest changes‚Ä¶"
    pushd "${PROJECT_DIR}" >/dev/null
      git fetch --all --prune
      git checkout "${BRANCH}"
      git pull --ff-only || true
    popd >/dev/null
  fi
}

# ----------------------------- Virtualenv ------------------------------------
create_or_reset_venv() {
  if [[ -d "${VENV_DIR}" && "${FORCE}" == "true" ]]; then
    log "üóë  Removing existing virtualenv (forced)‚Ä¶"
    rm -rf "${VENV_DIR}"
  fi
  if [[ ! -d "${VENV_DIR}" ]]; then
    log "‚è≥ Creating virtualenv at ${VENV_DIR}‚Ä¶"
    python3 -m venv "${VENV_DIR}"
  fi
  # shellcheck disable=SC1090
  source "${VENV_DIR}/bin/activate"
  pip install --upgrade pip setuptools wheel
}

# -------------------------- Python Dependencies ------------------------------
install_python_deps() {
  pushd "${PROJECT_DIR}" >/dev/null
    if [[ -f pyproject.toml ]]; then
      log "‚è≥ Installing mcpgateway (editable) with dev extras‚Ä¶"
      pip install -e '.[dev]' || pip install -e .
    elif [[ -f requirements.txt ]]; then
      log "‚è≥ Installing from requirements.txt‚Ä¶"
      pip install -r requirements.txt
    else
      log "‚ÑπÔ∏è  No pyproject.toml/requirements.txt. Assuming package installed already."
    fi
  popd >/dev/null
}

# ------------------------------- .env file -----------------------------------
ensure_env_file() {
  mkdir -p "${LOG_DIR}"
  if [[ ! -f "${ENV_FILE}" ]]; then
    log "‚è≥ Creating ${ENV_FILE} with safe defaults‚Ä¶"
    # Generate secure defaults
    RAND_PASS="$(openssl rand -hex 16 2>/dev/null || echo 'changeme')"
    RAND_JWT="$(openssl rand -hex 24 2>/dev/null || echo 'dev-secret')"
    cat > "${ENV_FILE}" <<EOF
# --- MCP Gateway .env (autogenerated) ---
HOST=${HOST}
PORT=${PORT}
BASIC_AUTH_USERNAME=admin
BASIC_AUTH_PASSWORD=${RAND_PASS}
JWT_SECRET_KEY=${RAND_JWT}

# Database (sqlite default). For Postgres, set:
# DATABASE_URL=postgresql+psycopg://user:pass@localhost:5432/mcpgw
DATABASE_URL=sqlite:///./gateway.sqlite

# Logging
LOG_LEVEL=INFO
EOF
    log "‚úÖ Wrote ${ENV_FILE}. Review and edit if needed."
  else
    log "‚úÖ Using existing env file: ${ENV_FILE}"
  fi
}

# ------------------------------ DB Init --------------------------------------
init_db() {
  # shellcheck disable=SC1090
  source "${VENV_DIR}/bin/activate"
  pushd "${PROJECT_DIR}" >/dev/null
    log "‚è≥ Initializing gateway database‚Ä¶"
    python -m mcpgateway.db
  popd >/dev/null
  log "‚úÖ Database initialized."
}

# ------------------------------ Start Gateway -------------------------------
start_gateway() {
  # Kill prior instances on the same port (if any)
  if ss -tunlp 2>/dev/null | grep -q ":${PORT}"; then
    if [[ "${NON_INTERACTIVE}" == "true" ]]; then
      log "‚ö†Ô∏è  Port ${PORT} in use; attempting to stop previous mcpgateway‚Ä¶"
      pkill -f "mcpgateway --host .* --port ${PORT}" || true
      sleep 1
    else
      read -r -p "‚ö†Ô∏è  Port ${PORT} in use. Stop existing mcpgateway and continue? [y/N] " r
      if [[ "${r,,}" == "y" ]]; then
        pkill -f "mcpgateway --host .* --port ${PORT}" || true
        sleep 1
      else
        die "Port conflict; aborting."
      fi
    end
  fi

  # shellcheck disable=SC1090
  source "${VENV_DIR}/bin/activate"
  # shellcheck disable=SC2046
  export $(grep -v '^\s*#' "${ENV_FILE}" | xargs)

  mkdir -p "$(dirname "${LOG_FILE}")"
  pushd "${PROJECT_DIR}" >/dev/null
    log "‚ñ∂ Starting MCP Gateway on ${HOST}:${PORT} (logs: ${LOG_FILE}) ‚Ä¶"
    nohup mcpgateway --host "${HOST}" --port "${PORT}" \
      > "${LOG_FILE}" 2>&1 < /dev/null &
    GATEWAY_PID=$!
  popd >/dev/null
  echo "${GATEWAY_PID}" > "${PROJECT_DIR}/mcpgateway.pid"
  log "‚úÖ MCP Gateway started (PID ${GATEWAY_PID})."
}

# ------------------------------ Wait /health --------------------------------
wait_for_health() {
  local url="http://${HOST}:${PORT}/health"
  log "‚è≥ Waiting for ${url} ‚Ä¶"
  for i in {1..60}; do
    if curl -fsS "${url}" | jq -e '.status=="ok"' >/dev/null 2>&1; then
      log "‚úÖ Gateway healthy at ${url}"
      return 0
    fi
    sleep 2
  done
  log "‚ö†Ô∏è  Gateway did not become healthy in time. Last log lines:"
  tail -n 80 "${LOG_FILE}" || true
  exit 1
}

# --------------------------------- Run ---------------------------------------
install_os_deps
fetch_repo
create_or_reset_venv
install_python_deps
ensure_env_file
init_db
start_gateway
wait_for_health

log ""
log "üéâ MCP‚ÄëGateway is ready."
log "   Health:    http://${HOST}:${PORT}/health"
log "   Logs:      ${LOG_FILE}"
log "   PID file:  ${PROJECT_DIR}/mcpgateway.pid"
log ""
log "Next:"
log "  ‚Ä¢ Verify servers:  bash scripts/4-verify_servers.sh"
log "  ‚Ä¢ Stop gateway:    bash scripts/7-Stop-MCP-Gateway.sh"
log "  ‚Ä¢ Start Matrix Hub: make dev (API on :7300)"
