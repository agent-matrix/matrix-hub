"""Initial schema

Revision ID: '6285799e5740'
Revises: 
Create Date: 2025-08-07 23:38:19.607024
"""

from __future__ import annotations

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '6285799e5740'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # 1) Create entity table (with its CHECK CONSTRAINT)
    op.create_table(
        'entity',
        sa.Column('uid', sa.String(), primary_key=True, nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.String(), nullable=False),
        sa.Column('summary', sa.Text(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('license', sa.String(), nullable=True),
        sa.Column('homepage', sa.String(), nullable=True),
        sa.Column('source_url', sa.String(), nullable=True),
        sa.Column('tenant_id', sa.String(), nullable=False, server_default=sa.text("'public'")),
        sa.Column('capabilities', sa.JSON(), nullable=False, server_default=sa.text("'[]'")),
        sa.Column('frameworks', sa.JSON(), nullable=False, server_default=sa.text("'[]'")),
        sa.Column('providers', sa.JSON(), nullable=False, server_default=sa.text("'[]'")),
        sa.Column('readme_blob_ref', sa.String(), nullable=True),
        sa.Column('quality_score', sa.Float(), nullable=False, server_default=sa.text("0.0")),
        sa.Column('release_ts', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False,
                  server_default=sa.text("CURRENT_TIMESTAMP")),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False,
                  server_default=sa.text("CURRENT_TIMESTAMP"),
                  onupdate=sa.text("CURRENT_TIMESTAMP")),
        # NEW COLUMNS: track gateway registration state and errors
        sa.Column('gateway_registered_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('gateway_last_error', sa.Text(), nullable=True),
        # inline check constraint so SQLite doesn't need an ALTER later
        sa.CheckConstraint(
            "type in ('agent','tool','mcp_server')",
            name="ck_entity_type"
        ),
    )
    op.create_index('ix_entity_type_name', 'entity', ['type', 'name'])
    op.create_index('ix_entity_created_at', 'entity', ['created_at'])

    # 2) Create remote table
    op.create_table(
        'remote',
        sa.Column('url', sa.String(), primary_key=True, nullable=False),
    )

    # 3) Create embedding_chunk table
    op.create_table(
        'embedding_chunk',
        sa.Column('entity_uid', sa.String(),
                  sa.ForeignKey('entity.uid', ondelete='CASCADE'),
                  primary_key=True, nullable=False),
        sa.Column('chunk_id', sa.String(), primary_key=True, nullable=False),
        sa.Column('vector', sa.JSON(), nullable=True),
        sa.Column('caps_text', sa.String(), nullable=True),
        sa.Column('frameworks_text', sa.String(), nullable=True),
        sa.Column('providers_text', sa.String(), nullable=True),
        sa.Column('quality_score', sa.Float(), nullable=True),
        sa.Column('embed_model', sa.String(), nullable=True),
        sa.Column('raw_ref', sa.String(), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False,
                  server_default=sa.text("CURRENT_TIMESTAMP"),
                  onupdate=sa.text("CURRENT_TIMESTAMP")),
    )
    op.create_index('ix_embedding_chunk_updated_at', 'embedding_chunk', ['updated_at'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_embedding_chunk_updated_at', table_name='embedding_chunk')
    op.drop_table('embedding_chunk')

    op.drop_index('ix_entity_created_at', table_name='entity')
    op.drop_index('ix_entity_type_name', table_name='entity')
    op.drop_table('remote')
    op.drop_table('entity')
    # ### end Alembic commands ###
