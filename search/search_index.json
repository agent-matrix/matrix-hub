{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Matrix Hub","text":"<p>Matrix Hub is a central catalog &amp; installer for AI agents, tools, and MCP servers. It ingests manifests from remote catalogs (e.g., GitHub), powers search (lexical &amp; semantic), computes and executes install plans (pip/uv, docker, git, zip), writes adapters into your project, and optionally registers assets with an MCP Gateway.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Reuse-first: find existing agents/tools before generating new code.</li> <li>Search: lexical (pg_trgm), semantic (pgvector), hybrid ranking.</li> <li>Install: uv/pip, docker, git, zip with safe defaults &amp; lockfile.</li> <li>MCP Gateway: register tools/servers using the gateway\u2019s admin API.</li> <li>Governance-ready: schema validation, basic policy hooks.</li> </ul>"},{"location":"#high-level-architecture","title":"High-level architecture","text":"<p><pre><code>flowchart LR\n  subgraph Catalog Authors\n    A[agents/tools/mcp servers] --&gt; I[index.json + manifests]\n  end\n  I --&gt;|ingest| H(Matrix Hub)\n\n  subgraph Dev Environment\n    C[matrix CLI / agent-generator] --&gt;|search/install| H\n  end\n\n  H --&gt;|register| G[MCP Gateway]\n  H --&gt;|adapters &amp; matrix.lock.json| P[Your Project]</code></pre> API: FastAPI on <code>:7300</code> DB: PostgreSQL (SQLite supported for local dev) Scheduler: periodic ingestion of remote catalogs</p>"},{"location":"#whats-in-this-release","title":"What\u2019s in this release","text":"<ul> <li>Core API: <code>/health</code>, <code>/catalog/search</code>, <code>/catalog/entities/{id}</code>, <code>/catalog/install</code>, <code>/catalog/remotes</code>, <code>/catalog/ingest</code></li> <li>Ingestor: <code>index.json</code> pull + schema validation</li> <li>Installer: <code>pip/uv</code> + <code>docker</code> + <code>git</code> + <code>zip</code></li> <li>MCP Gateway integration: tools &amp; servers (gateway registration)</li> <li>Adapters: example templates (LangGraph node, WXO skill stub)</li> </ul>"},{"location":"agent-installation/","title":"Installing Agents/Tools via Matrix Hub","text":"<p>You can install through the CLI or the API. Installation computes a plan, executes artifacts (pip/uv, docker, git, zip), writes adapters, registers to MCP Gateway, and emits <code>matrix.lock.json</code>.</p>"},{"location":"agent-installation/#cli","title":"CLI","text":"<pre><code># Search\nmatrix search \"summarize pdfs\" --type agent --capabilities pdf,summarize\n\n# Install into your project\nmatrix install agent:pdf-summarizer@1.4.2 --target ./apps/pdf-bot\n</code></pre>"},{"location":"agent-installation/#api","title":"API","text":"<pre><code>curl -s -X POST 'http://localhost:7300/catalog/install' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"id\":\"agent:pdf-summarizer@1.4.2\",\"target\":\"./apps/pdf-bot\"}' | jq\n</code></pre>"},{"location":"agent-installation/#artifacts-supported","title":"Artifacts Supported","text":"<ul> <li><code>pypi</code> \u2192 <code>uv pip install \u2026</code> (fallback to <code>pip</code>)</li> <li><code>oci</code> \u2192 <code>docker pull \u2026</code></li> <li><code>git</code> \u2192 <code>git clone \u2026</code> (+ optional checkout)</li> <li><code>zip</code> \u2192 <code>curl + unzip</code></li> </ul>"},{"location":"agent-installation/#adapters","title":"Adapters","text":"<p>Framework glue written to your project (e.g., LangGraph node). Path defaults can be overridden per adapter spec. Files added to <code>matrix.lock.json</code> under <code>adapters_files</code>.</p>"},{"location":"agent-installation/#lockfile","title":"Lockfile","text":"<p><code>matrix.lock.json</code> records installed entities, artifacts, digests, and adapters for reproducibility.</p>"},{"location":"agent-installation/#rollback-manual","title":"Rollback (manual)","text":"<p>Remove adapters and revert project changes. Re-run install with a known-good version (<code>@version</code>).</p>"},{"location":"agent-registration/","title":"Registration with MCP Gateway","text":"<p>After installing, Matrix Hub can register entities with MCP Gateway via its admin API.</p>"},{"location":"agent-registration/#what-gets-registered","title":"What Gets Registered","text":"<ul> <li>Tools: <code>POST /tools</code> with <code>name</code>, <code>integration_type (REST|MCP)</code>, <code>request_type</code>, <code>url</code>, <code>input_schema</code>, and optional headers/annotations.</li> <li>MCP Servers: <code>POST /gateways</code> with <code>name</code>, <code>url</code>, <code>transport (HTTP/SSE/STDIO/STREAMABLEHTTP)</code>, and optional auth.</li> <li>Discovery of tools is automatic after registration; no separate endpoint needed.</li> <li>Resources / Prompts (optional): added via <code>POST /resources</code> / <code>POST /prompts</code>.</li> </ul>"},{"location":"agent-registration/#idempotency-conflicts","title":"Idempotency &amp; Conflicts","text":"<ul> <li>Re-registration with identical payloads may yield <code>409 Conflict</code>; Matrix Hub surfaces this in the install results.</li> <li>Admin token is required; set <code>MCP_GATEWAY_TOKEN</code>.</li> </ul>"},{"location":"agent-registration/#security","title":"Security","text":"<ul> <li>Use Gateway over TLS.</li> <li>Store auth tokens outside source control (<code>.env</code>, secret manager).</li> </ul>"},{"location":"agents/","title":"Agents, Tools, and MCP Servers (Concepts)","text":"<p>Matrix Hub catalogs three entity types:</p> <ul> <li>Agent: an orchestrated capability (often a service with <code>/invoke</code>).</li> <li>Tool: a callable function/tool (often REST or MCP tool).</li> <li>MCP Server: a server that exposes MCP protocol endpoints and tools.</li> </ul>"},{"location":"agents/#manifests","title":"Manifests","text":"<p>Each entity has a manifest describing:</p> <ul> <li>Identity: <code>type</code>, <code>id</code>, <code>name</code>, <code>version</code></li> <li>Metadata: <code>summary</code>, <code>description</code>, <code>license</code>, <code>homepage</code></li> <li>Capabilities/tags; compatibility (frameworks/providers)</li> <li>Artifacts: <code>pypi | oci | git | zip</code> with specs</li> <li>Adapters: framework glue to drop into your project</li> <li><code>mcp_registration</code>: how to register with MCP Gateway</li> </ul>"},{"location":"api/","title":"API \u2014 Endpoints","text":"<p>Base URL defaults to <code>http://localhost:7300</code>.</p>"},{"location":"api/#get-health","title":"<code>GET /health</code>","text":"<p>Query params - <code>check_db</code> (bool, optional): also checks DB connectivity.</p> <p>Response <pre><code>{ \"status\": \"ok\", \"db\": \"ok\" }\n</code></pre></p>"},{"location":"api/#get-catalogsearch","title":"<code>GET /catalog/search</code>","text":"<p>Hybrid search with filters.</p> <p>Params</p> <ul> <li><code>q</code> (required): text query</li> <li><code>type</code>: <code>agent</code> | <code>tool</code> | <code>mcp_server</code></li> <li><code>capabilities</code>, <code>frameworks</code>, <code>providers</code> (CSV)</li> <li><code>mode</code>: <code>keyword</code> | <code>semantic</code> | <code>hybrid</code></li> <li><code>limit</code>: default <code>20</code></li> <li><code>with_rag</code>: <code>true</code> to include a short fit explanation</li> </ul> <p>200 Response (truncated)</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"agent:pdf-summarizer@1.4.2\",\n      \"type\": \"agent\",\n      \"name\": \"PDF Summarizer\",\n      \"version\": \"1.4.2\",\n      \"summary\": \"...\",\n      \"capabilities\": [\"pdf\", \"summarize\"],\n      \"frameworks\": [\"langgraph\"],\n      \"providers\": [\"watsonx\"],\n      \"score_lexical\": 0.8,\n      \"score_semantic\": 0.7,\n      \"score_final\": 0.79,\n      \"fit_reason\": \"Matches 'summarize pdfs'...\"\n    }\n  ],\n  \"total\": 1\n}\n</code></pre>"},{"location":"api/#get-catalogentitiesid","title":"<code>GET /catalog/entities/{id}</code>","text":"<p>Return full metadata for an entity (resolved from the ingested manifests).</p> <p>Example</p> <pre><code>GET /catalog/entities/agent:pdf-summarizer@1.4.2\n</code></pre>"},{"location":"api/#post-cataloginstall","title":"<code>POST /catalog/install</code>","text":"<p>Execute an install plan.</p> <p>Body</p> <pre><code>{\n  \"id\": \"agent:pdf-summarizer@1.4.2\",\n  \"target\": \"./apps/pdf-bot\"\n}\n</code></pre> <p>200 Response (truncated)</p> <pre><code>{\n  \"plan\": { \"artifacts\": [...], \"adapters\": [...], \"mcp_registration\": {...} },\n  \"results\": [\n    {\"step\":\"pypi\",\"ok\":true, \"elapsed_secs\": 5.9},\n    {\"step\":\"adapters.write\",\"ok\":true,\"extra\":{\"count\":1}},\n    {\"step\":\"gateway.register\",\"ok\":true,\"extra\":{\"tool\":{\"id\":\"...\"}}}\n  ],\n  \"files_written\": [\"apps/pdf-bot/src/flows/pdf_summarizer_node.py\",\"apps/pdf-bot/matrix.lock.json\"],\n  \"lockfile\": { \"version\": 1, \"entities\": [ ... ] }\n}\n</code></pre>"},{"location":"api/#get-catalogremotes-post-catalogremotes","title":"<code>GET /catalog/remotes</code> / <code>POST /catalog/remotes</code>","text":"<p>List or add remote catalogs (<code>index.json</code> URLs).</p> <p>Admin-only if <code>API_TOKEN</code> is set.</p>"},{"location":"api/#post-catalogingestremotename","title":"<code>POST /catalog/ingest?remote=&lt;name&gt;</code>","text":"<p>Manually trigger ingestion for a configured remote.</p> <p>Admin-only if <code>API_TOKEN</code> is set.</p>"},{"location":"api/#optional-get-gatewaykind","title":"Optional: <code>GET /gateway/{kind}</code>","text":"<p>Convenience read-only view into the MCP Gateway registrations (if enabled in your build).</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#components","title":"Components","text":"<ul> <li>API (FastAPI): search, entities, install, remotes, ingest trigger.</li> <li>DB (PostgreSQL): normalized entity metadata, artifacts, tags, capabilities.</li> <li>Ingestor: pulls <code>index.json</code>, validates manifests, upserts entities.</li> <li>Installer: executes artifact steps, writes adapters, updates lockfile, registers with MCP Gateway.</li> <li>Scheduler: periodic ingestion via APScheduler.</li> </ul>"},{"location":"architecture/#data-model-high-level","title":"Data model (high level)","text":"<ul> <li><code>entity</code> \u2014 <code>(uid, type, name, version, summary, description, capabilities[], frameworks[], providers[], source_url, created_at, updated_at, provenance)</code></li> <li><code>artifact</code> \u2014 <code>(entity_id, kind, uri, hash, size, install_hint)</code></li> <li><code>tag</code> &amp; <code>entity_tag</code>, <code>capability</code> &amp; <code>entity_capability</code> (many-to-many)</li> <li>optional <code>embedding_chunk</code> (when using vector search)</li> </ul>"},{"location":"architecture/#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n  subgraph Ingest\n    R[Remote index.json] --&gt; V[Validate schemas]\n    V --&gt; U[Upsert DB]\n  end\n  subgraph API\n    S[Search] --&gt;|rank| O[Response]\n    E[Entity detail] --&gt; O\n    I[Install] --&gt; P[Project files + lockfile]\n    I --&gt; G[MCP Gateway]\n  end\n  DB[(Postgres)] &lt;--&gt; S\n  DB &lt;--&gt; E\n  DB &lt;--&gt; U</code></pre>"},{"location":"architecture/#scaling","title":"Scaling","text":"<ul> <li>Swap lexical backend to OpenSearch and vector backend to Milvus without changing the public API.</li> <li>Keep Matrix Hub stateless; scale horizontally.</li> </ul>"},{"location":"blob-storage/","title":"Blob Storage","text":"<p>Stores long text artifacts (READMEs, examples) for retrieval-augmented generation (RAG).</p>"},{"location":"blob-storage/#backends","title":"Backends","text":"<ul> <li>Local disk (default): <code>${BLOB_DIR:-./data/blobs}</code></li> <li>Object storage (later): S3/MinIO with lifecycle policies</li> </ul>"},{"location":"blob-storage/#keys-paths","title":"Keys &amp; Paths","text":"<ul> <li>Key format: <code>\"{entity_uid}/{section}/{position}\"</code> \u2192 sanitized to a flat path</li> <li>Files are UTF-8 text</li> <li>Checksums stored in DB to detect changes</li> </ul>"},{"location":"blob-storage/#retention","title":"Retention","text":"<ul> <li>Keep last N versions per entity (configurable).</li> <li>GC job prunes orphan blobs after successful re-indexing.</li> </ul>"},{"location":"blob-storage/#security","title":"Security","text":"<ul> <li>No secrets in blob content.</li> <li>If private catalogs are used, ensure the object store is private and accessed via presigned URLs.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#010-initial-release","title":"0.1.0 \u2014 Initial Release","text":"<ul> <li>API: <code>/health</code>, <code>/catalog/search</code>, <code>/catalog/entities/{id}</code>, <code>/catalog/install</code>, <code>/catalog/remotes</code>, <code>/catalog/ingest</code></li> <li>Ingest: <code>index.json</code> pull + schema validation</li> <li>Search: lexical (pg_trgm), semantic (pgvector optional), hybrid ranking</li> <li>Install: pip/uv, docker, git, zip; adapters; lockfile</li> <li>MCP Gateway: tool/server registration via admin API</li> <li>Docs: MkDocs site (Material)</li> </ul>"},{"location":"chunking/","title":"Chunking","text":"<p>Prepares text for semantic search &amp; RAG.</p>"},{"location":"chunking/#inputs","title":"Inputs","text":"<ul> <li><code>name</code>, <code>summary</code>, <code>description</code></li> <li>README/excerpts referenced by manifest or repository</li> <li>Examples / usage snippets (if provided)</li> </ul>"},{"location":"chunking/#strategy","title":"Strategy","text":"<ul> <li>Hierarchical splitting:</li> <li>Headings (<code>#</code>, <code>##</code>) \u2192 paragraphs \u2192 sentences</li> <li>Target chunk size ~ 300\u2013600 tokens (configurable)</li> <li>Metadata per chunk:</li> <li><code>entity_uid</code>, <code>section</code>, <code>position</code>, <code>weight</code>, <code>source_uri</code>, <code>checksum</code></li> </ul>"},{"location":"chunking/#weights","title":"Weights","text":"<ul> <li>Title/name: higher prior (e.g., 1.3\u00d7)</li> <li>Summary: 1.2\u00d7</li> <li>README/body: 1.0\u00d7</li> <li>Examples/code: 1.1\u00d7</li> </ul>"},{"location":"chunking/#output","title":"Output","text":"<ul> <li>A list of <code>(chunk_id, entity_uid, text, weight, meta)</code> ready for embedding.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Matrix Hub is configured entirely via environment variables (see <code>.env.example</code>).</p> Key Description Example <code>DATABASE_URL</code> SQLAlchemy URL <code>postgresql+psycopg://matrix:matrix@db:5432/matrixhub</code> <code>HOST</code> / <code>PORT</code> Bind address &amp; port <code>0.0.0.0</code> / <code>7300</code> <code>API_TOKEN</code> Bearer token for admin/protected routes <code>supersecret</code> <code>MATRIX_REMOTES</code> CSV/JSON list of <code>index.json</code> URLs to ingest <code>https://raw.githubusercontent.com/.../index.json</code> <code>INGEST_INTERVAL_MIN</code> Background ingestion interval (minutes) <code>15</code> <code>SEARCH_LEXICAL_BACKEND</code> <code>pgtrgm</code> or <code>none</code> <code>pgtrgm</code> <code>SEARCH_VECTOR_BACKEND</code> <code>pgvector</code> or <code>none</code> <code>none</code> <code>EMBED_MODEL</code> Embedder model id (informational; pluggable) <code>all-MiniLM-L6-v2</code> <code>MCP_GATEWAY_URL</code> MCP Gateway base URL <code>http://mcpgateway:7200</code> <code>MCP_GATEWAY_TOKEN</code> Bearer for gateway admin API <code>supersecret</code>"},{"location":"configuration/#notes","title":"Notes","text":"<ul> <li>If <code>API_TOKEN</code> is set, pass <code>Authorization: Bearer &lt;token&gt;</code> on admin calls (<code>/catalog/ingest</code>, <code>/catalog/remotes</code>).</li> <li>For local SQLLite quick trials, you can use <code>sqlite+pysqlite:///./data/catalog.sqlite</code>. Some search features (pg_trgm/pgvector) won\u2019t be available.</li> </ul>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#docker-compose-reference","title":"Docker Compose (reference)","text":"<ul> <li>See <code>docker-compose.yaml</code> included in the repo.</li> <li>Exposes the API on <code>:7300</code> and Postgres on <code>:5432</code>.</li> </ul>"},{"location":"deployment/#container-image","title":"Container image","text":"<pre><code>docker build -t ghcr.io/agent-matrix/matrix-hub:latest .\ndocker run -p 7300:7300 --env-file .env ghcr.io/agent-matrix/matrix-hub:latest\n</code></pre>"},{"location":"deployment/#kubernetes-guidance","title":"Kubernetes (guidance)","text":"<ul> <li>Use a Deployment with 2+ replicas.</li> <li>Configure a Secret for <code>API_TOKEN</code> and gateway tokens.</li> <li>Add a Job or init container to run Alembic migrations before rollout.</li> <li>Use a Readiness probe on <code>/health</code>.</li> </ul>"},{"location":"deployment/#persistence","title":"Persistence","text":"<ul> <li>Postgres should be backed by persistent volumes.</li> <li>The API is stateless (no local writes beyond ephemeral temp files).</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or 3.12</li> <li>Postgres (optional \u2014 SQLite works for unit tests)</li> <li><code>make</code> for convenience</li> </ul>"},{"location":"development/#setup","title":"Setup","text":"<pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -U pip\npip install -e .[dev]\ncp .env.example .env\nmake dev\n</code></pre>"},{"location":"development/#make-targets","title":"Make targets","text":"<ul> <li><code>make dev</code> \u2014 <code>uvicorn</code> with auto-reload</li> <li><code>make run</code> \u2014 foreground server</li> <li><code>make lint</code> / <code>make fmt</code> \u2014 Ruff static checks &amp; formatting</li> <li><code>make test</code> \u2014 <code>pytest</code> test suite</li> <li><code>make migrate m=\"msg\"</code> \u2014 Alembic revision</li> <li><code>make upgrade</code> \u2014 apply migrations to head</li> </ul>"},{"location":"development/#tests","title":"Tests","text":"<ul> <li>Unit tests use SQLite by default.</li> <li>CI runs on Python 3.11/3.12 (see <code>.github/workflows/ci.yml</code>).</li> </ul>"},{"location":"development/#style","title":"Style","text":"<ul> <li>Ruff enforces formatting and lint rules.</li> <li>Prefer type hints and small, composable functions.</li> <li>Keep external network operations behind service boundaries.</li> </ul>"},{"location":"embedding/","title":"Embedding","text":"<p>Encodes chunks into vectors for semantic search &amp; hybrid ranking.</p>"},{"location":"embedding/#embedder","title":"Embedder","text":"<ul> <li>Default: lightweight sentence transformer (config: <code>EMBED_MODEL</code>).</li> <li>Batch size &amp; concurrency tuned to avoid memory spikes.</li> </ul>"},{"location":"embedding/#failure-retries","title":"Failure &amp; Retries","text":"<ul> <li>If the model fails, the chunk is marked pending; the scheduler retries later.</li> <li>We never block ingestion of the catalog on embedding failures.</li> </ul>"},{"location":"embedding/#stored-fields","title":"Stored Fields","text":"<ul> <li><code>entity_uid</code></li> <li><code>chunk_id</code></li> <li><code>vector</code> (list of floats / DB-specific binary)</li> <li><code>dim</code>, <code>model_id</code>, <code>created_at</code></li> </ul>"},{"location":"embedding/#replacement-policy","title":"Replacement Policy","text":"<ul> <li>Re-embedding occurs only when:</li> <li>Chunk text or weight changed, or</li> <li>Embedder <code>model_id</code> changed, or</li> <li>Admin forced re-embed.</li> </ul>"},{"location":"faq/","title":"FAQ","text":"<p>Q: Can I run Matrix Hub without Postgres? Yes, for local development and tests. Some search features (pg_trgm/pgvector) are unavailable on SQLite.</p> <p>Q: Where do adapter files go? They\u2019re written under your target project directory (e.g., <code>src/flows/...</code>) and referenced in <code>matrix.lock.json</code>.</p> <p>Q: How do I add my agents/tools to the catalog? Publish manifests in your catalog repo and ensure they\u2019re listed in its <code>index.json</code>. Then configure that index URL in <code>MATRIX_REMOTES</code>.</p> <p>Q: Does Matrix Hub modify MCP Gateway code? No. It uses gateway admin APIs to register tools/servers.</p> <p>Q: How do I update an installed agent? Re-run <code>POST /catalog/install</code> with the new <code>id@version</code>. Your lockfile is updated and registrations are refreshed.</p>"},{"location":"indexing-architecture/","title":"Indexing Architecture","text":"<p>Matrix Hub ingests manifests (agents, tools, MCP servers) from remote catalogs (e.g., GitHub), validates them, normalizes metadata into a relational Catalog DB, optionally chunks &amp; embeds long text, and updates a Vector Index plus a Blob Store for RAG.</p> <pre><code>flowchart LR\nR[Remotes\\nindex.json/tree/zip] --&gt; I[Ingestor]\nI --&gt; V[Validator\\nJSON Schema + policy]\nV --&gt; N[Normalizer\\nmanifest \u2192 DB rows]\nN --&gt; D[Catalog DB]\nN --&gt; C[Chunker\\nname/desc/README]\nC --&gt; E[Embedder]\nE --&gt; X[Vector Index]\nN --&gt; B[Blob Store]</code></pre>"},{"location":"indexing-architecture/#goals","title":"Goals","text":"<ul> <li>Reuse-first: one canonical entry per <code>(type, id, version)</code>.</li> <li>Idempotent: re-ingesting the same content is safe.</li> <li>Provable: provenance stored (<code>remote@commit</code>, ETag, timestamps).</li> <li>Composable: lexical, vector, and RAG layers are pluggable.</li> </ul>"},{"location":"indexing-architecture/#data-flow-high-level","title":"Data Flow (high level)","text":"<ol> <li>Discover: pull <code>index.json</code> (or walk repo ZIP/tree).</li> <li>Validate: JSON Schema + optional signatures/SBOM checks.</li> <li>Normalize: map to <code>entity</code>, <code>capabilities</code>, <code>artifacts</code>, <code>adapters</code>, <code>compatibility</code>.</li> <li>Persist: upsert into DB; record provenance and checksums.</li> <li>Chunk &amp; Embed (optional): split long text \u2192 vectors \u2192 upsert vector index.</li> <li>Blob Store: persist large text (READMEs, examples) for RAG retrieval.</li> </ol>"},{"location":"indexing-architecture/#slos-operational-notes","title":"SLOs &amp; Operational Notes","text":"<ul> <li>Freshness: default ingest every 15 minutes (configurable).</li> <li>Back-pressure: batch size and rate limits to avoid API throttling.</li> <li>Consistency: write DB first, then vectors/blobs; retries are safe.</li> <li>Observability: structured logs; ingest counters; rejection reasons.</li> </ul>"},{"location":"ingestion/","title":"Ingestion","text":"<p>Matrix Hub ingests manifests from one or more remotes and stores normalized metadata in the catalog DB.</p>"},{"location":"ingestion/#sources","title":"Sources","text":"<ul> <li>index.json files published by your catalog (e.g., GitHub Pages or raw Git URLs).</li> <li>Each index entry points at a <code>*.manifest.yaml</code> (agent, tool, or mcp-server).</li> </ul>"},{"location":"ingestion/#validation","title":"Validation","text":"<ul> <li>Manifests are validated against JSON Schemas:</li> <li><code>schemas/agent.manifest.schema.json</code></li> <li><code>schemas/tool.manifest.schema.json</code></li> <li><code>schemas/mcp-server.manifest.schema.json</code></li> </ul> <p>Invalid manifests are skipped and logged.</p>"},{"location":"ingestion/#scheduling","title":"Scheduling","text":"<ul> <li>Background job polls remotes every <code>INGEST_INTERVAL_MIN</code> minutes (default 15).</li> <li>Manual trigger via <code>POST /catalog/ingest?remote=&lt;name&gt;</code> (admin).</li> </ul>"},{"location":"ingestion/#provenance","title":"Provenance","text":"<ul> <li>The DB stores the manifest URL and optional commit/hash, enabling traceability.</li> </ul>"},{"location":"ingestors/","title":"Ingestors","text":"<p>The ingestor discovers manifests from remote catalogs and feeds the validator + normalizer.</p>"},{"location":"ingestors/#sources","title":"Sources","text":"<ul> <li>Mode A \u2014 index.json (preferred): a single file listing manifest URLs (and optional checksums).</li> <li>Mode B \u2014 tree/ZIP: list repo trees via API or download a ZIP and scan <code>*.manifest.yaml</code>.</li> </ul>"},{"location":"ingestors/#sample-indexjson","title":"Sample <code>index.json</code>","text":"<pre><code>{\n  \"manifests\": [\n    \"[https://raw.githubusercontent.com/agent-matrix/catalog/main/agents/pdf-summarizer/1.4.2/agent.manifest.yaml](https://raw.githubusercontent.com/agent-matrix/catalog/main/agents/pdf-summarizer/1.4.2/agent.manifest.yaml)\",\n    \"[https://raw.githubusercontent.com/agent-matrix/catalog/main/tools/ocr/0.3.1/tool.manifest.yaml](https://raw.githubusercontent.com/agent-matrix/catalog/main/tools/ocr/0.3.1/tool.manifest.yaml)\"\n  ],\n  \"commit\": \"abc123\",\n  \"generated_at\": \"2025-07-10T12:30:00Z\"\n}\n</code></pre>"},{"location":"ingestors/#scheduling","title":"Scheduling","text":"<p>Default: every 15 minutes via APScheduler (<code>INGEST_INTERVAL_MIN</code>). Manual trigger: <code>POST /catalog/ingest?remote=name</code> (if admin token enabled).</p>"},{"location":"ingestors/#http-etiquette","title":"HTTP Etiquette","text":"<p>Use <code>ETag</code>/<code>Last-Modified</code> to avoid re-downloading. Respect <code>429</code>/<code>5xx</code> with exponential backoff. Timeouts tuned (connect/read) to keep the scheduler responsive.</p>"},{"location":"ingestors/#provenance-idempotency","title":"Provenance &amp; Idempotency","text":"<p>Each upsert stores <code>remote.name</code>, <code>commit/etag</code>, and <code>last_sync_ts</code>. Upsert key: <code>(type, id, version)</code>; replays are safe. On validation failure: entity is rejected with reason (stored for debugging).</p>"},{"location":"install-and-registration/","title":"Install &amp; Registration","text":""},{"location":"install-and-registration/#install-steps","title":"Install steps","text":"<ul> <li>pypi \u2014 <code>uv pip install</code> (with <code>pip</code> fallback)</li> <li>oci \u2014 <code>docker pull</code></li> <li>git \u2014 <code>git clone</code> and optional <code>checkout</code></li> <li>zip \u2014 download &amp; extract (hash-checked when <code>digest</code> is provided)</li> </ul> <p>Each step is idempotent where possible (e.g., docker pull, git checkout).</p>"},{"location":"install-and-registration/#adapters","title":"Adapters","text":"<ul> <li>Manifest <code>adapters</code> entries instruct Matrix Hub to write glue code/templates into your project:</li> <li>Example: LangGraph node in <code>src/flows/...</code></li> <li>Example: WatsonX Orchestrate <code>skill.yaml</code></li> <li>Files are listed under <code>files_written</code> and referenced in <code>matrix.lock.json</code>.</li> </ul>"},{"location":"install-and-registration/#lockfile","title":"Lockfile","text":"<p><code>matrix.lock.json</code> captures: - Entity ID &amp; version - Artifacts resolved - Adapters written - Provenance (manifest URL, optional commit)</p>"},{"location":"install-and-registration/#mcp-gateway-registration","title":"MCP Gateway registration","text":"<p>If the manifest contains <code>mcp_registration</code>: - tool \u2014 POST <code>/tools</code> (integration_type: REST/MCP, request_type, url, input_schema) - server \u2014 POST <code>/gateways</code> (transport: SSE/HTTP/STDIO/STREAMABLEHTTP) - resources/prompts \u2014 POST <code>/resources</code>, <code>/prompts</code></p> <p>Some gateways perform discovery automatically after registration. Matrix Hub\u2019s gateway client supports this by design.</p>"},{"location":"manifests/","title":"Catalog Manifests","text":"<p>Matrix Hub consumes manifests stored in your catalog repo and indexed by an <code>index.json</code>.</p>"},{"location":"manifests/#types","title":"Types","text":"<ul> <li>Agent \u2014 <code>agent.manifest.yaml</code></li> <li>Tool \u2014 <code>tool.manifest.yaml</code></li> <li>MCP Server \u2014 <code>mcp-server.manifest.yaml</code></li> </ul>"},{"location":"manifests/#core-fields","title":"Core fields","text":"<ul> <li><code>schema_version</code>, <code>type</code>, <code>id</code>, <code>name</code>, <code>version</code>, <code>description</code>, <code>license</code></li> <li><code>capabilities</code>, <code>compatibility</code> (frameworks/providers)</li> <li><code>artifacts</code> \u2014 list of <code>{ kind: pypi|oci|git|zip, spec: {...} }</code></li> <li><code>endpoints</code> (optional)</li> <li><code>mcp_registration</code> (optional)</li> <li><code>adapters</code> (optional)</li> </ul>"},{"location":"manifests/#example-agent","title":"Example \u2014 Agent","text":"<pre><code>schema_version: 1\ntype: agent\nid: pdf-summarizer\nname: PDF Summarizer\nversion: 1.4.2\ndescription: Summarizes long PDF documents.\ncapabilities: [pdf, summarize]\ncompatibility:\n  frameworks: [langgraph]\n  providers: [watsonx]\nartifacts:\n  - kind: pypi\n    spec: { package: \"pdf-summarizer-agent\", version: \"==1.4.2\" }\nadapters:\n  - framework: langgraph\n    template_key: langgraph-node\nmcp_registration:\n  tool:\n    name: pdf_summarize\n    integration_type: REST\n    request_type: POST\n    url: [https://example.com/invoke](https://example.com/invoke)\n    input_schema: { type: object, properties: { input: { type: string } }, required: [input] }\n</code></pre>"},{"location":"manifests/#schemas","title":"Schemas","text":"<ul> <li><code>schemas/agent.manifest.schema.json</code></li> <li><code>schemas/tool.manifest.schema.json</code></li> <li><code>schemas/mcp-server.manifest.schema.json</code></li> </ul> <p>During ingestion, schemas are validated; invalid manifests are skipped with warnings.</p>"},{"location":"mcp-gateway/","title":"MCP Gateway Overview","text":"<p>The MCP Gateway (also known as Context Forge) is the central hub for the Model Context Protocol (MCP), providing:</p> <ul> <li>Service registry &amp; discovery: Agents register themselves and advertise their \u201ctools\u201d (capabilities).</li> <li>Request routing: All requests go through a single HTTP gateway, which dispatches them to the correct service.</li> <li>Security &amp; authentication: Supports Basic Auth for user/admin access, and JWTs for fine\u2011grained, time\u2011limited tokens.</li> <li>Health monitoring: Built\u2011in <code>/health</code> endpoint for readiness checks.</li> <li>Local &amp; production modes: Can run locally in a Python virtualenv or be containerized.</li> </ul>"},{"location":"mcp-gateway/#key-components","title":"Key Components","text":"Component Location Makefile targets top\u2011level <code>Makefile</code> Setup script <code>scripts/setup-mcp-gateway.sh</code> Start/stop scripts <code>scripts/start-mcp-gateway.sh</code>, <code>scripts/stop-mcp-gateway.sh</code> Verification script <code>scripts/verify_servers.sh</code> Core code <code>mcpgateway/</code> directory Default config template <code>.env.example</code>"},{"location":"mcp-gateway/#getting-started-local-python-mode","title":"Getting Started (Local Python Mode)","text":"<ol> <li>Setup environment    ```bash    make gateway-setup ````</li> </ol> <p>This runs <code>scripts/setup-mcp-gateway.sh</code> to:</p> <ul> <li>Check OS compatibility (Ubuntu\u00a022.04 recommended)</li> <li>Install Python\u00a03.11 if missing</li> <li>Install OS packages: git, curl, jq, etc.</li> <li>Clone or update the <code>IBM/mcp-context-forge</code> repo at a pinned commit</li> <li>Create (or recreate) a Python\u00a03.11 virtualenv</li> <li>Install Python dependencies in editable (<code>.[dev]</code>) mode</li> <li> <p>Copy <code>.env.example</code> \u2192 <code>.env</code> if needed</p> </li> <li> <p>Start the gateway</p> </li> </ul> <pre><code>make gateway-start\n</code></pre> <p>Invokes <code>scripts/start-mcp-gateway.sh</code>, which:</p> <ul> <li>Activates virtualenv</li> <li>Loads <code>.env</code> vars</li> <li>Initializes the SQLite (or configured) database</li> <li>Launches <code>mcpgateway</code> on <code>$HOST:$PORT</code> (default <code>0.0.0.0:4444</code>)</li> <li> <p>Waits (up to 2\u202fminutes) for <code>/health</code> to return <code>{\"status\":\"ok\"}</code></p> </li> <li> <p>Verify it\u2019s running</p> </li> </ul> <pre><code>make gateway-verify\n</code></pre> <p>Runs <code>scripts/verify_servers.sh</code>, which checks:</p> <ul> <li>HTTP <code>/health</code> endpoint</li> <li>Admin <code>/servers</code> list (using JWT\u2011based admin token)</li> <li> <p>Any additional smoke tests</p> </li> <li> <p>Stop the gateway</p> </li> </ul> <pre><code>make gateway-stop\n</code></pre> <p>Runs <code>scripts/stop-mcp-gateway.sh</code> to kill any running <code>mcpgateway</code> processes.</p>"},{"location":"normalization/","title":"Normalization","text":"<p>Converts validated manifests into relational rows and auxiliary tables used by search &amp; install.</p>"},{"location":"normalization/#canonical-identity","title":"Canonical Identity","text":"<ul> <li>UID: <code>\"{type}:{id}@{version}\"</code> (e.g., <code>agent:pdf-summarizer@1.4.2</code>)</li> <li>Type: <code>agent | tool | mcp_server</code></li> <li>Name (display), Summary, Description, License, Homepage, Source URL</li> </ul>"},{"location":"normalization/#field-hygiene","title":"Field Hygiene","text":"<ul> <li>Capabilities / Tags: lowercase slug tokens, deduplicated.</li> <li>Compatibility: <code>frameworks</code>, <code>providers</code>, <code>runtime</code>, version ranges.</li> <li>Artifacts: <code>pypi | oci | git | zip</code> with <code>spec</code> JSON.</li> <li>Adapters: framework + <code>template_key</code> + optional path/params.</li> <li>mcp_registration: tool/server/resources/prompts blocks.</li> </ul>"},{"location":"normalization/#versioning","title":"Versioning","text":"<ul> <li>Versions are strings; sorting is lexical unless catalog provides SemVer hints.</li> <li>We do not infer \"latest\" at write time; the client decides at read time.</li> </ul>"},{"location":"normalization/#rejection-reasons-examples","title":"Rejection Reasons (examples)","text":"<ul> <li>Schema violation: missing required fields.</li> <li>Policy violation: denied license.</li> <li>Unresolvable artifact: missing <code>package</code> or invalid <code>image</code>.</li> </ul>"},{"location":"observability/","title":"Observability","text":""},{"location":"observability/#logging","title":"Logging","text":"<ul> <li>JSON logs with correlation IDs via middleware.</li> <li>Standard fields: timestamp, level, logger, message, request_id (when available).</li> </ul>"},{"location":"observability/#metrics-tracing","title":"Metrics &amp; Tracing","text":"<ul> <li>(Roadmap) Expose Prometheus metrics: ingest latency, search latency, install success rate.</li> <li>(Roadmap) OpenTelemetry tracing around install steps and gateway calls.</li> </ul>"},{"location":"observability/#audit","title":"Audit","text":"<ul> <li>Record ingestion attempts and install steps in application logs.</li> <li>Consider forwarding logs to ELK/Loki for retention and analysis.</li> </ul>"},{"location":"querying-architecture/","title":"Querying Architecture","text":"<p>Search blends lexical and semantic signals with quality &amp; recency, then optionally performs RAG to produce a \u201cfit reason\u201d.</p> <pre><code>flowchart LR\nQ[User query + filters] --&gt; L[Lexical BM25]\nQ --&gt; S[Semantic ANN]\nD[Catalog DB] --&gt; L\nX[Vector Index] --&gt; S\nL --&gt; H[Hybrid Ranker]\nS --&gt; H\nH --&gt; R[RAG optional]\nR --&gt; O[Search response]\nH --&gt; O</code></pre>"},{"location":"querying-architecture/#scoring","title":"Scoring","text":"<p><code>score_final = w_sem*sem + w_lex*lex + w_q*quality + w_r*recency</code> Weights configured at runtime (e.g., <code>sem=0.6, lex=0.4</code> by default).</p>"},{"location":"querying-architecture/#caching","title":"Caching","text":"<ul> <li>ETag/Last-Modified per query/filter tuple.</li> <li>Clients should respect <code>304 Not Modified</code>.</li> </ul>"},{"location":"querying-architecture/#failure-modes","title":"Failure Modes","text":"<ul> <li>If vector backend is unavailable, we fall back to lexical only.</li> <li>If lexical backend is unavailable, semantic only.</li> <li>Results include which modes contributed to the final score.</li> </ul>"},{"location":"querying/","title":"Querying API","text":"<p>Matrix Hub exposes <code>GET /catalog/search</code> for discovery with optional hybrid ranking and RAG.</p>"},{"location":"querying/#endpoint","title":"Endpoint","text":"<p><code>GET /catalog/search</code></p>"},{"location":"querying/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>q</code> (required): free-text query</li> <li><code>type</code>: <code>agent | tool | mcp_server</code></li> <li><code>capabilities</code>: CSV (<code>pdf,summarize</code>)</li> <li><code>frameworks</code>: CSV (<code>langgraph,watsonx_orchestrate</code>)</li> <li><code>providers</code>: CSV (<code>openai,watsonx</code>)</li> <li><code>mode</code>: <code>keyword | semantic | hybrid</code> (default from settings)</li> <li><code>limit</code>: default 20</li> <li><code>offset</code>: default 0</li> <li><code>with_rag</code>: <code>true|false</code></li> <li><code>rerank</code>: <code>none | llm</code> (future)</li> <li><code>etag</code>: handled via <code>If-None-Match</code> header</li> </ul>"},{"location":"querying/#response-shape","title":"Response (shape)","text":"<pre><code>{\n  \"items\": [\n    {\n      \"id\": \"agent:pdf-summarizer@1.4.2\",\n      \"type\": \"agent\",\n      \"name\": \"PDF Summarizer\",\n      \"version\": \"1.4.2\",\n      \"summary\": \"Summarizes long PDFs.\",\n      \"capabilities\": [\"pdf\", \"summarize\"],\n      \"frameworks\": [\"langgraph\"],\n      \"providers\": [\"watsonx\"],\n      \"score_lexical\": 0.81,\n      \"score_semantic\": 0.74,\n      \"score_quality\": 0.90,\n      \"score_recency\": 0.88,\n      \"score_final\": 0.82,\n      \"fit_reason\": \"Matches 'summarize pdfs' in README.\"\n    }\n  ],\n  \"total\": 1\n}\n</code></pre>"},{"location":"querying/#examples","title":"Examples","text":"<pre><code># Keyword-only\ncurl -s 'http://localhost:7300/catalog/search?q=pdf&amp;type=agent&amp;mode=keyword' | jq\n\n# Hybrid with filters and RAG\ncurl -s 'http://localhost:7300/catalog/search?q=summarize%20pdfs&amp;type=agent&amp;capabilities=pdf,summarize&amp;mode=hybrid&amp;with_rag=true' | jq\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#requirements","title":"Requirements","text":"<ul> <li>Docker 24+ with docker compose</li> <li>Or Python 3.11/3.12 for local dev</li> </ul>"},{"location":"quickstart/#1-clone-and-configure","title":"1) Clone and configure","text":"<p><pre><code>git clone https://github.com/agent-matrix/matrix-hub.git\ncd matrix-hub\ncp .env.example .env\n</code></pre> Edit <code>.env</code> as needed (e.g., <code>MATRIX_REMOTES</code> to your catalog\u2019s <code>index.json</code>).</p>"},{"location":"quickstart/#2-run-with-compose","title":"2) Run with compose","text":"<p><pre><code>docker compose up -d --build\ncurl -s http://localhost:7300/health | jq\n</code></pre> Expected:</p> <pre><code>{ \"status\": \"ok\" }\n</code></pre>"},{"location":"quickstart/#3-search-the-catalog","title":"3) Search the catalog","text":"<pre><code>curl -s 'http://localhost:7300/catalog/search?q=summarize%20pdfs&amp;type=agent&amp;capabilities=pdf,summarize' | jq\n</code></pre>"},{"location":"quickstart/#4-install-into-your-project","title":"4) Install into your project","text":"<p><pre><code>mkdir -p apps/pdf-bot\ncurl -s -X POST 'http://localhost:7300/catalog/install' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"id\":\"agent:pdf-summarizer@1.4.2\",\"target\":\"./apps/pdf-bot\"}' | jq\n</code></pre> This writes project adapters and <code>apps/pdf-bot/matrix.lock.json</code>.</p> <p>If the manifest includes <code>mcp_registration</code>, the installer also registers the tool/server with MCP Gateway.</p>"},{"location":"quickstart/#5-local-development-no-docker","title":"5) Local development (no Docker)","text":"<pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -U pip\npip install -e .\nmake dev\n</code></pre>"},{"location":"quickstart/#open-httplocalhost7300health","title":"open http://localhost:7300/health","text":""},{"location":"sdk/","title":"Python SDK (matrix-python-sdk)","text":"<p>The SDK provides a small client for Matrix Hub APIs, used by both the CLI and the agent generator.</p>"},{"location":"sdk/#install","title":"Install","text":"<pre><code>pip install matrix-python-sdk\n</code></pre>"},{"location":"sdk/#usage","title":"Usage","text":"<pre><code>from matrix_sdk.client import MatrixClient\n\nclient = MatrixClient(base_url=\"http://localhost:7300\", token=None)\n\n# Search\nresp = client.search(\n    q=\"summarize pdfs\",\n    type=\"agent\",\n    capabilities=\"pdf,summarize\",\n    limit=5\n)\nfor item in resp[\"items\"]:\n    print(item[\"id\"], item[\"score_final\"])\n\n# Show entity\nentity = client.entity(\"agent:pdf-summarizer@1.4.2\")\n\n# Install\ninstall = client.install(\"agent:pdf-summarizer@1.4.2\", target=\"./apps/pdf-bot\")\nprint(install[\"files_written\"])\n</code></pre>"},{"location":"sdk/#timeouts-retries","title":"Timeouts &amp; Retries","text":"<p>Default timeout: 20s (configurable per client). Retries handled by the CLI for network hiccups; the server is idempotent.</p>"},{"location":"sdk/#auth","title":"Auth","text":"<p>If <code>API_TOKEN</code> is set on the server, pass a Bearer token: <pre><code>MatrixClient(base_url=..., token=\"your-api-token\")\n</code></pre></p>"},{"location":"search-diagram/","title":"Search Diagram","text":""},{"location":"search-diagram/#search-indexing-architecture","title":"Search &amp; Indexing Architecture","text":"<p>The diagram below shows the \u201cIngest\u00a0&amp;\u00a0Index\u00a0Pluggable\u201d \u2192 \u201cQuery\u00a0&amp;\u00a0Rank\u00a0Stable\u00a0API\u201d flow, and the table that follows maps each piece to the <code>matrix-hub</code> modules that implement it (as well as the native client and SDK).</p> <p>```mermaid flowchart LR     subgraph Ingest &amp; Index Pluggable         G[GitHub Ingestor\\nmanifests + READMEs] --&gt; N[Normalizer\\nvalidate + enrich + version]         N --&gt; D[Catalog DB\\nPostgres]         N --&gt; C[Chunker\\nname/desc/README/examples]         C --&gt; E[Embedder\\nmodel: MiniLM/*; Workers: in-process or Celery]         E --&gt; V[Vector Index\\npgvector \u27f6 Milvus later]         N --&gt; B[BlobStore\\nlocal disk \u27f6 S3/MinIO later]     end</p> <pre><code>subgraph Query &amp; Rank Stable API\n    U[User query + filters] --&gt; S[/GET /catalog/search/]\n    S --&gt; L[Lexical\\npg_trgm BM25 \u27f6 OpenSearch later]\n    S --&gt; Q[Vector ANN\\npgvector \u27f6 Milvus later]\n    D --&gt; L\n    V --&gt; Q\n    L --&gt; H[Hybrid Ranker\\nweights in config]\n    Q --&gt; H\n    H --&gt;|top\u2011K| R[RAG optional\\nfetch best chunks from BlobStore + summarize fit]\n    R --&gt; O[JSON response: items + scores + fit_reason]\n    H --&gt; O\nend\n</code></pre> <p>````</p>"},{"location":"search-diagram/#implementation-mapping","title":"Implementation Mapping","text":"Flow Node Package / Module File(s) GitHub\u00a0Ingestor(manifests\u202f+\u202fREADMEs) <code>matrix-hub</code> (Companion service) <code>src/services/ingest.py</code> Normalizer(validate\u202f+\u202fenrich\u202f+\u202fversion) <code>matrix-hub</code> <code>src/services/validate.py</code> + parts of <code>ingest.py</code> Catalog\u00a0DB(Postgres or SQLite) <code>matrix-hub</code> <code>src/db.py</code>, <code>src/models.py</code> Chunker(name/desc/README/examples) <code>matrix-hub</code> (search internals) <code>src/services/search/chunking.py</code> Embedder(MiniLM model; workers) <code>matrix-hub</code> (search backends) <code>src/services/search/backends/embedder.py</code> Vector\u00a0Index(pgvector \u2192 Milvus) <code>matrix-hub</code> (search backends) <code>src/services/search/backends/vector.py</code> BlobStore(local disk \u2192 S3/MinIO) <code>matrix-hub</code> (search backends) <code>src/services/search/backends/blobstore.py</code> GET\u00a0/catalog/search(Stable API) <code>matrix-hub</code> (API routes) <code>src/routes/catalog.py</code> Lexical\u00a0Search(pg_trgm BM25 \u2192 OpenSearch) <code>matrix-hub</code> (search backends) <code>src/services/search/backends/lexical.py</code> Hybrid\u00a0Ranker(weights in config) <code>matrix-hub</code> (search logic) <code>src/services/search/ranker.py</code> RAG\u00a0(optional)(fetch best chunks + summarize) <code>matrix-hub</code> (search logic) <code>src/services/search/rag.py</code> Python SDK(client library) <code>matrix-python-sdk</code> <code>matrix_sdk/client.py</code>, <code>cache.py</code>, <code>types.py</code> Agent Creator(native CLI client) <code>matrix-cli</code> <code>matrix_cli/__main__.py</code>, <code>matrix_cli/commands/*.py</code> Agent Generator Plugin(reuse\u2011first) <code>agent-generator-matrix</code> <code>agent_generator_matrix/plugin.py</code> <p>Note: \u2022 All ingestion, indexing, embedding and search\u2011and\u2011rank logic lives in <code>matrix-hub</code> under its <code>services/</code> and <code>routes/</code> directories. \u2022 The Python SDK (<code>matrix-python-sdk</code>) and CLI (<code>matrix-cli</code> aka \u201cagent\u2011creator\u201d) are the native clients of the platform. \u2022 The <code>agent-generator-matrix</code> plugin hooks your <code>planning_agent.py</code> to call Matrix Hub first (reuse\u2011first), then fall back to code generation only if no suitable agent is found.</p>"},{"location":"search/","title":"Search","text":"<p>Matrix Hub supports lexical, semantic, and hybrid ranking.</p>"},{"location":"search/#lexical-keyword","title":"Lexical (keyword)","text":"<ul> <li>Backend: pg_trgm (PostgreSQL trigram), using BM25-ish scoring.</li> <li>Fields: name, summary, description, tags/capabilities (flattened).</li> </ul>"},{"location":"search/#semantic-vector","title":"Semantic (vector)","text":"<ul> <li>Backend: pgvector (optional).</li> <li>Embedding: pluggable; the default build exposes a dummy embedder for local trials.</li> </ul>"},{"location":"search/#hybrid-ranking","title":"Hybrid ranking","text":"<p>Score is a weighted blend: <code>score_final = w_sem * semantic + w_lex * lexical + w_q * quality + w_r * recency</code></p> <p>Weights are configurable via <code>SEARCH_HYBRID_WEIGHTS</code> (e.g., <code>sem:0.6,lex:0.4,rec:0.1,q:0.1</code>).</p>"},{"location":"search/#rag-fit-reasoning-optional","title":"RAG fit reasoning (optional)","text":"<p>When <code>with_rag=true</code>, the service can fetch top README/manifest chunks and produce a short \u201cfit_reason\u201d string for each hit.</p>"},{"location":"search/#limits","title":"Limits","text":"<ul> <li>On SQLite, only keyword mode is available.</li> <li>For large scale, consider migrating to Milvus/Weaviate for ANN and OpenSearch for lexical, keeping the same public API.</li> </ul>"},{"location":"security/","title":"Security","text":""},{"location":"security/#api-authentication","title":"API authentication","text":"<ul> <li>If <code>API_TOKEN</code> is set, admin routes require <code>Authorization: Bearer &lt;token&gt;</code>.</li> </ul>"},{"location":"security/#supply-chain","title":"Supply chain","text":"<ul> <li>Prefer <code>oci</code> artifacts with signed images and digests.</li> <li>Prefer pinned Python versions (e.g., <code>==1.4.2</code>) or upper bounds.</li> </ul>"},{"location":"security/#policies-extensible","title":"Policies (extensible)","text":"<ul> <li>License allow/deny lists at ingest and install time.</li> <li>Optional signature and SBOM validation hooks (stubs in current release).</li> </ul>"},{"location":"security/#network-egress","title":"Network egress","text":"<ul> <li>Installer performs <code>pip</code>, <code>docker</code>, and <code>git</code> operations.</li> <li>Use allowlists/proxies as required by your environment.</li> </ul>"},{"location":"security/#secrets","title":"Secrets","text":"<ul> <li>Do not commit <code>.env</code>. Provide tokens via Secret managers where possible.</li> </ul>"},{"location":"vector-indexing/","title":"Vector Indexing","text":"<p>Matrix Hub supports a pluggable vector layer:</p> <ul> <li>Day-1: <code>pgvector</code> (PostgreSQL extension)</li> <li>Later: Milvus/FAISS/Weaviate (adapter interface is already isolated)</li> </ul>"},{"location":"vector-indexing/#pgvector-recommended-to-start","title":"pgvector (recommended to start)","text":"<ul> <li>Table: <code>embedding_chunk</code></li> <li><code>entity_uid</code>, <code>chunk_id</code>, <code>vector</code>, <code>weight</code>, <code>model_id</code>, timestamps</li> <li>Index type: IVF/Flat/HNSW (choose based on your pgvector version and dataset size)</li> <li>Tunables:</li> <li>IVF lists / probes for recall vs. latency</li> <li>HNSW <code>m</code>, <code>ef_search</code> if available</li> <li>Filter strategy: apply filters on <code>entity</code> first (type, caps), then join candidates to ANN results.</li> </ul>"},{"location":"vector-indexing/#example-conceptual","title":"Example (conceptual)","text":"<pre><code>-- Create extension (once)\nCREATE EXTENSION IF NOT EXISTS vector;\n\n-- Example index (IVF, dimensionality N)\n-- CREATE INDEX ON embedding_chunk USING ivfflat (vector vector_l2_ops) WITH (lists=100);\n</code></pre>"},{"location":"vector-indexing/#alternatives-future","title":"Alternatives (future)","text":"<p>Milvus: stand-alone ANN with collections per <code>model_id</code>. API contracts for vector search remain the same: <code>search(query_vec, filters, k) \u2192 hits</code>.</p>"},{"location":"verify-mcp-gateway/","title":"MCP Gateway Verification","text":"<p>After setup and starting the gateway, run a few checks to ensure it\u2019s operational.</p>"},{"location":"verify-mcp-gateway/#using-the-provided-script","title":"Using the provided script","text":"<p>```bash make gateway-verify</p>"},{"location":"verify-mcp-gateway/#or","title":"or","text":"<p>scripts/verify_servers.sh ````</p> <p>This will:</p> <ol> <li>Check health endpoint</li> </ol> <p><code>bash    curl -fsS http://$HOST:$PORT/health | jq .    # Expect: { \"status\": \"ok\" }</code></p> <ol> <li>List registered servers</li> </ol> <p>```bash    # Generate a short\u2011lived admin JWT    ADMIN_TOKEN=$(      source mcpgateway/.venv/bin/activate      python3 -m mcpgateway.utils.create_jwt_token \\        --username \"$BASIC_AUTH_USER\" \\        --secret   \"$JWT_SECRET_KEY\" \\        --exp 60    )</p> <p>curl -u \"$BASIC_AUTH_USER:$BASIC_AUTH_PASSWORD\" \\      -H \"Authorization: Bearer $ADMIN_TOKEN\" \\      http://$HOST:$PORT/servers | jq .    # Expect an empty list: []    ```</p> <ol> <li> <p>(Optional) Additional smoke tests</p> </li> <li> <p>Probe any custom agent endpoints you may have registered</p> </li> <li>Tail logs: <code>tail -f mcpgateway/logs/mcpgateway.log</code> for errors/warnings</li> </ol>"},{"location":"verify-mcp-gateway/#manual-verification","title":"Manual Verification","text":"<ol> <li> <p>Open browser    Navigate to <code>http://localhost:4444/admin/</code>, log in with your Basic Auth user (default <code>admin</code>/<code>changeme</code>).</p> </li> <li> <p>Inspect Dashboard</p> </li> <li> <p>No agents listed initially</p> </li> <li> <p>Check \u201cServers\u201d tab to confirm the gateway itself is registered</p> </li> <li> <p>API calls    Try a few calls with <code>curl</code> or Postman to <code>/health</code>, <code>/servers</code>, etc.</p> </li> </ol>"}]}